{"ast":null,"code":"var _jsxFileName = \"/Users/hyerinhwang/Desktop/project/react/react-context-app/client/src/context/OrderContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderContext = /*#__PURE__*/createContext();\nexport function OrderContextProvider(props) {\n  _s();\n  const [orderCounts, setOrderCounts] = useState({\n    products: new Map(),\n    options: new Map()\n  });\n  const [totals, setTotals] = useState({\n    products: 0,\n    options: 0,\n    total: 0\n  });\n  const pricePerItem = {\n    products: 1000,\n    options: 500\n  };\n  const calculateSubtotal = (orderType, orderCounts) => {\n    let optionCount = 0;\n    for (const count of orderCounts[orderType].values()) {\n      optionCount += count;\n    }\n    return optionCount * pricePerItem[orderType];\n  };\n  useEffect(() => {\n    const productsTotal = calculateSubtotal(\"products\", orderCounts);\n    const optionsTotal = calculateSubtotal(\"options\", orderCounts);\n    const total = productsTotal + optionsTotal;\n    setTotals({\n      products: productsTotal,\n      options: optionsTotal,\n      total: total\n    });\n  }, [orderCounts]);\n  const value = useMemo(() => {\n    function updateItemCount(itemName, newItemCount, orderType) {\n      const newOrderCounts = {\n        ...orderCounts\n      };\n      const orderCountsMap = orderCounts[orderType];\n      orderCountsMap.set(itemName, parseInt(newItemCount));\n      setOrderCounts(newOrderCounts);\n    }\n    return [{\n      ...orderCounts\n    }, updateItemCount];\n  }, [orderCounts]);\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: value,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n}\n_s(OrderContextProvider, \"Rmm2rMePJRsWu+5TV4SDMM13Lv8=\");\n_c = OrderContextProvider;\nvar _c;\n$RefreshReg$(_c, \"OrderContextProvider\");","map":{"version":3,"names":["createContext","useMemo","useState","jsxDEV","_jsxDEV","OrderContext","OrderContextProvider","props","_s","orderCounts","setOrderCounts","products","Map","options","totals","setTotals","total","pricePerItem","calculateSubtotal","orderType","optionCount","count","values","useEffect","productsTotal","optionsTotal","value","updateItemCount","itemName","newItemCount","newOrderCounts","orderCountsMap","set","parseInt","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hyerinhwang/Desktop/project/react/react-context-app/client/src/context/OrderContext.js"],"sourcesContent":["import { createContext, useMemo, useState } from \"react\";\n\nconst OrderContext = createContext();\n\nexport function OrderContextProvider(props) {\n\n    const [orderCounts, setOrderCounts] = useState({\n        products: new Map(),\n        options: new Map()\n    })\n\n    const [totals, setTotals] = useState({\n        products:  0,\n        options: 0,\n        total: 0\n    })\n\n    const pricePerItem = {\n        products:  1000,\n        options: 500,\n    }\n\n    const calculateSubtotal = (orderType, orderCounts) => {\n        let optionCount = 0;\n        for (const count of orderCounts[orderType].values()) {\n            optionCount += count;\n        }\n        return optionCount * pricePerItem[orderType];\n    }\n\n    useEffect(() => {\n\n        const productsTotal = calculateSubtotal(\"products\", orderCounts);\n        const optionsTotal = calculateSubtotal(\"options\", orderCounts);\n        const total = productsTotal + optionsTotal;\n        setTotals({\n            products:  productsTotal,\n            options: optionsTotal,\n            total: total,\n        });\n\n    }, [orderCounts])\n    \n\n    const value = useMemo(() => {\n        function updateItemCount(itemName, newItemCount, orderType){\n            const newOrderCounts = { ...orderCounts };\n\n            const orderCountsMap = orderCounts[orderType];\n            orderCountsMap.set(itemName, parseInt(newItemCount));\n\n            setOrderCounts(newOrderCounts);\n        }\n\n        return [{ ...orderCounts }, updateItemCount]\n    }, [orderCounts])\n\n    return <OrderContext.Provider value={value} {...props} />\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAEpC,OAAO,SAASM,oBAAoBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAExC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC;IAC3CS,QAAQ,EAAE,IAAIC,GAAG,CAAC,CAAC;IACnBC,OAAO,EAAE,IAAID,GAAG,CAAC;EACrB,CAAC,CAAC;EAEF,MAAM,CAACE,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC;IACjCS,QAAQ,EAAG,CAAC;IACZE,OAAO,EAAE,CAAC;IACVG,KAAK,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAG;IACjBN,QAAQ,EAAG,IAAI;IACfE,OAAO,EAAE;EACb,CAAC;EAED,MAAMK,iBAAiB,GAAGA,CAACC,SAAS,EAAEV,WAAW,KAAK;IAClD,IAAIW,WAAW,GAAG,CAAC;IACnB,KAAK,MAAMC,KAAK,IAAIZ,WAAW,CAACU,SAAS,CAAC,CAACG,MAAM,CAAC,CAAC,EAAE;MACjDF,WAAW,IAAIC,KAAK;IACxB;IACA,OAAOD,WAAW,GAAGH,YAAY,CAACE,SAAS,CAAC;EAChD,CAAC;EAEDI,SAAS,CAAC,MAAM;IAEZ,MAAMC,aAAa,GAAGN,iBAAiB,CAAC,UAAU,EAAET,WAAW,CAAC;IAChE,MAAMgB,YAAY,GAAGP,iBAAiB,CAAC,SAAS,EAAET,WAAW,CAAC;IAC9D,MAAMO,KAAK,GAAGQ,aAAa,GAAGC,YAAY;IAC1CV,SAAS,CAAC;MACNJ,QAAQ,EAAGa,aAAa;MACxBX,OAAO,EAAEY,YAAY;MACrBT,KAAK,EAAEA;IACX,CAAC,CAAC;EAEN,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC;EAGjB,MAAMiB,KAAK,GAAGzB,OAAO,CAAC,MAAM;IACxB,SAAS0B,eAAeA,CAACC,QAAQ,EAAEC,YAAY,EAAEV,SAAS,EAAC;MACvD,MAAMW,cAAc,GAAG;QAAE,GAAGrB;MAAY,CAAC;MAEzC,MAAMsB,cAAc,GAAGtB,WAAW,CAACU,SAAS,CAAC;MAC7CY,cAAc,CAACC,GAAG,CAACJ,QAAQ,EAAEK,QAAQ,CAACJ,YAAY,CAAC,CAAC;MAEpDnB,cAAc,CAACoB,cAAc,CAAC;IAClC;IAEA,OAAO,CAAC;MAAE,GAAGrB;IAAY,CAAC,EAAEkB,eAAe,CAAC;EAChD,CAAC,EAAE,CAAClB,WAAW,CAAC,CAAC;EAEjB,oBAAOL,OAAA,CAACC,YAAY,CAAC6B,QAAQ;IAACR,KAAK,EAAEA,KAAM;IAAA,GAAKnB;EAAK;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAC7D;AAAC9B,EAAA,CAtDeF,oBAAoB;AAAAiC,EAAA,GAApBjC,oBAAoB;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}